/*
===============================================================================
 Name        : main.c
 Author      : $(author)
 Version     :
 Copyright   : $(copyright)
 Description : main definition
===============================================================================
*/

#if defined (__USE_LPCOPEN)
#if defined(NO_BOARD_LIB)
#include "chip.h"
#else
#include "board.h"
#endif
#endif
#include <iostream>

#include <cr_section_macros.h>

// TODO: insert other include files here
#include "ITM_write.h"

// TODO: insert other definitions and declarations here
class DigitalIoPin {
public:
DigitalIoPin(int pin, int port, bool input = true, bool pullup = true, bool invert = false);
virtual ~DigitalIoPin();
bool read();
void write(bool value);
private:
// add these as needed
};

//DigitalIoPin::DigitalIoPin

void setupButton() {
	Chip_IOCON_PinMuxSet(LPC_IOCON, 0, 17, (IOCON_MODE_PULLUP | IOCON_DIGMODE_EN | IOCON_INV_EN));
	Chip_GPIO_SetPinDIRInput(LPC_GPIO, 0, 17);

	Chip_IOCON_PinMuxSet(LPC_IOCON, 1, 11, (IOCON_MODE_PULLUP | IOCON_DIGMODE_EN | IOCON_INV_EN));
	Chip_GPIO_SetPinDIRInput(LPC_GPIO, 1, 11);

	Chip_IOCON_PinMuxSet(LPC_IOCON, 1, 9, (IOCON_MODE_PULLUP | IOCON_DIGMODE_EN | IOCON_INV_EN));
	Chip_GPIO_SetPinDIRInput(LPC_GPIO, 1, 9);
}

/*bool read(){
	return;
}*/

int main(void) {

#if defined (__USE_LPCOPEN)
    // Read clock settings and update SystemCoreClock variable
    SystemCoreClockUpdate();
#if !defined(NO_BOARD_LIB)
    // Set up and initialize all required blocks and
    // functions related to the board hardware
    Board_Init();
    // Set the LED to the state of "On"
    //Board_LED_Set(0, true);
#endif
#endif


    // TODO: insert code here
    //DigitalIoPin sw1(0,17,true, true, false);
    ITM_init();
    bool butState;
    butState = Chip_GPIO_GetPinState(LPC_GPIO, 0, 17);
    if (butState == false) {
    	ITM_write("SW1 \n");

    }
    // Force the counter to be placed into memory
    volatile static int i = 0 ;
    // Enter an infinite loop, just incrementing a counter
    /*while(1) {
        i++ ;
    }*/
    return 0 ;
}
