/*
===============================================================================
 Name        : main.c
 Author      : $(author)
 Version     :
 Copyright   : $(copyright)
 Description : main definition
===============================================================================
*/

#if defined (__USE_LPCOPEN)
#if defined(NO_BOARD_LIB)
#include "chip.h"
#else
#include "board.h"
#endif
#endif
#include <iostream>
#include <cstdio>
#include <stdio.h>

#include <cr_section_macros.h>

// TODO: insert other include files here
#include "ITM_write.h"

// TODO: insert other definitions and declarations here

class DigitalIoPin {
	int port;
	int pin;
	int IdNum;
	bool hold;
	//int counterNum = 0;
	public:
		DigitalIoPin (int, int, bool, bool, bool, int);
		//virtual ~DigitalIoPin();
		int read();
		bool write();
	private:
};

DigitalIoPin :: DigitalIoPin(int setPin, int setPort, bool input, bool pullup, bool invert, int Id) {
	ITM_write("IoPin object added.\n");
	port = setPort;
	pin = setPin;
	IdNum = Id;
	//int ModeSet = IOCON_MODE_PULLUP;
	Chip_IOCON_PinMuxSet(LPC_IOCON, port, pin, (IOCON_MODE_PULLUP | IOCON_DIGMODE_EN | IOCON_INV_EN));
	if (input) {
		Chip_GPIO_SetPinDIRInput(LPC_GPIO, port, pin);
	} else {
		Chip_GPIO_SetPinDIROutput(LPC_GPIO, port, pin);
	}
}

static volatile int counter;
#ifdef __cplusplus
extern "C" {
#endif
/**
* @brief Handle interrupt from SysTick timer
* @return Nothing
*/
void SysTick_Handler(void)
{
	if(counter > 0) counter--;
}
#ifdef __cplusplus
}
#endif

void Sleep(int ms)
{
	counter = ms;
	while(counter > 0) {
		__WFI();
	}
}

int DigitalIoPin :: read(){
	int timeInMs = 0;
	if (pin == 0 && port == 0) {
		ITM_write("pin/port lost");
		return 0;
	}
	if (Chip_GPIO_GetPinState(LPC_GPIO, port, pin)) {
		while (Chip_GPIO_GetPinState(LPC_GPIO, port, pin)) {
			Sleep(10);
			timeInMs++;
		}
		timeInMs *= 10;
		return timeInMs;
	}
	return 0;
}

bool DigitalIoPin :: write(){
	return false;
}

/*int DigitalIoPin :: count (){
	while (Chip_GPIO_GetPinState(LPC_GPIO, 0, 17)){
		if(hold == false){
			hold = true;
			//return true;
			counterNum = counterNum++;
			//return counterNum++;
		}
		else{
			hold = false;
			//return false;
		}
	}
	return counterNum++;
}*/




int main(void) {
	int n1;
	char result[50];

	#if defined (__USE_LPCOPEN)
		// Read clock settings and update SystemCoreClock variable
	SystemCoreClockUpdate();
	#if !defined(NO_BOARD_LIB)
		// Set up and initialize all required blocks and
		// functions related to the board hardware
	Board_Init();
		// Set the LED to the state of "On
		//Board_LED_Set(0, false);
	#endif
	#endif
	// TODO: insert code here
    //DigitalIoPin sw1(0,17,true, true, false);
    ITM_init();

    // Force the counter to be placed into memory
    volatile static int i = 0 ;
    // Enter an infinite loop, just incrementing a counter
    DigitalIoPin button1 (17, 0, true, true, false, 0, 0);
    DigitalIoPin button2 (11, 1, true, true, false, 0, 0);
    DigitalIoPin button3 (9, 1, true, true, false, 0, 0);

    while(1) {
    	n1 = button1.read();
    	if (n1) {
    		snprintf(result, 50, "SW1 %d \n", n1);
    		ITM_write(result);
    	}
    	if (button2.read()) { ITM_write("SW2 \n"); }
    	if (button3.read()) { ITM_write("SW3 \n"); }
    }
    return 0 ;
}
