/*
===============================================================================
 Name        : main.c
 Author      : $(author)
 Version     :
 Copyright   : $(copyright)
 Description : main definition
===============================================================================
*/

#if defined (__USE_LPCOPEN)
#if defined(NO_BOARD_LIB)
#include "chip.h"
#else
#include "board.h"
#endif
#endif
#include <iostream>

#include <cr_section_macros.h>

// TODO: insert other include files here
#include "ITM_write.h"

// TODO: insert other definitions and declarations here

class DigitalIoPin {
	public:
		DigitalIoPin(int pin, int port, bool input = true, bool pullup = true, bool invert = false, int Id);
		virtual ~DigitalIoPin();
		void write();
		void setupButton(void);
	private:
		int IdNum;
}

void DigitalIoPin :: DigitalIoPin(int pin, int port, bool input = true, bool pullup = true, bool invert = false) {
	IdNum = Id;
	//int ModeSet = IOCON_MODE_PULLUP;
	Chip_IOCON_PinMuxSet(LPC_IOCON, port, pin, (IOCON_MODE_PULLUP | IOCON_DIGMODE_EN | IOCON_INV_EN));
	if (input) {
		Chip_GPIO_SetPinDIRInput(LPC_GPIO, port, pin);
	} else {
		Chip_GPIO_SetPinDIROutput(LPC_GPIO, port, pin);
	}
}

bool DigitalIoPin :: read(){
	Chip_GPIO_GetPinState(LPC_GPIO, port, pin);
}

void DigitalIoPin :: write(string pinName){
	ITM_write("SW1 \n");
}

int main(void) {
	#if defined (__USE_LPCOPEN)
		// Read clock settings and update SystemCoreClock variable
	SystemCoreClockUpdate();
	#if !defined(NO_BOARD_LIB)
		// Set up and initialize all required blocks and
		// functions related to the board hardware
	Board_Init();
		// Set the LED to the state of "On
		//Board_LED_Set(0, false);
	#endif
	#endif
	// TODO: insert code here
    //DigitalIoPin sw1(0,17,true, true, false);
    ITM_init();
    setupButtons();
    bool butState1 = false;
    bool butState2 = false;
    bool butState3 = false;
    int counter1 = 0;
    int counter2 = 0;
    int counter3 = 0;
    // Force the counter to be placed into memory
    volatile static int i = 0 ;
    // Enter an infinite loop, just incrementing a counter
    while(1) {
    	butState1 = Chip_GPIO_GetPinState(LPC_GPIO, 0, 17);
		if (butState1 == false) {
			counter1 = 1;
		}
		if (butState1 == true && counter1 == 1){
			ITM_write("SW1 \n");
			counter1 = 0;
		}
		butState2 = Chip_GPIO_GetPinState(LPC_GPIO, 1, 11);
		if (butState2 == false) {
			counter2 = 1;
		}
		if (butState2 == true && counter2 == 1){
			ITM_write("SW2 \n");
			counter2 = 0;
		}
		butState3 = Chip_GPIO_GetPinState(LPC_GPIO, 1, 9);
		if (butState3 == false) {
			counter3 = 1;
		}
		if (butState3 == true && counter3 == 1){
			ITM_write("SW3 \n");
			counter3 = 0;
		}
    }
    return 0 ;
}
