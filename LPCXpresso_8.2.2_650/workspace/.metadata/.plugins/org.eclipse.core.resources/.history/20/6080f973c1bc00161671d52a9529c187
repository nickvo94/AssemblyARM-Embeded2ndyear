/*
===============================================================================
 Name        : main.c
 Author      : $(author)
 Version     :
 Copyright   : $(copyright)
 Description : main definition
===============================================================================
*/
#define TICKRATE_HZ1 (1000)//100000
#if defined (__USE_LPCOPEN)
#if defined(NO_BOARD_LIB)
#include "chip.h"
#else
#include "board.h"
#endif
#endif
#include "DigitalIOPin.h"
#include "LiquidCrystal.h"
#include <stdio.h>
#include "RealTimeClock.h"

#ifdef __cplusplus
extern "C" {
#endif
/**
* @brief Handle interrupt from SysTick timer
* @return Nothing
*/

enum alarmClockModes_t {
	SHOWTIME,
	SETTIME_HOUR,
	SETTIME_MIN,
	SETALARM_ONOFF,
	SETALARM_HOUR,
	SETALARM_MIN
};

struct clockHelpText {
	int lenght;
	char[15];
};

using namespace std;

RealTimeClock myClock;

static RealTimeClock *clock = &myClock;

static volatile uint32_t timerTick;

void SysTick_Handler(void)
{
	if(clock != NULL) clock->Tick();//clock->Tick();
	//timerTick++;
}
#ifdef __cplusplus
}
#endif

int WriteHour(int now,LiquidCrystal *display){
	char H[3]= {0,0,0};
	int h;
	h = (now/36000)%24;
	if(h>24){h=0;}
	sprintf(H,"%d", h);
	if(h < 10){
		display->setCursor(9, 1);
		display->print(H);
	}else{
		display->setCursor(8, 1);
		display->print(H);}
	if(h == 0 ){display->setCursor(8, 1);display->print(" ");}
	return h;
}


void Do4But1(int but1press,LiquidCrystal *display, string onOff, int x, int y){
	if(but1press == 0){
		display ->clear();
		display->setCursor(x, y);
		display->print("Time");
	}
	if(but1press == 1){
		display ->clear();
		display ->setCursor(x-1, y);
		display ->print(">");
		display ->setCursor(x, y);
		display ->print(onOff);
	}
	if(but1press == 2){
		display ->setCursor(x+11, y-1);
		display ->print(" ");
		display ->setCursor(x, y);
		display ->print(">");
	}
	if(but1press == 3 || but1press == 5){
		display ->setCursor(x-6, y);
		display ->print(" ");
		display ->setCursor(x, y);
		display ->print("<");
	}
	if(but1press == 4){
		display ->setCursor(x+6, y);
		display ->print(" ");
		display ->setCursor(x, y);
		display ->print(">");
	}

}

int ReadSetHour(int setH, int but1press,int but2press){
	if(but1press == 2 || but1press == 4){
		if(but2press < 24 && but2press > 0){setH = setH + 1;}
		if(but2press == 24){setH = 0;}
		if(but2press > 24){setH = 60%24 + 1;}
		return setH;
	}
}
int ReadSetMinute(int setM, int but1press,int but2press){
	if(but1press == 3 || but1press == 5){
		int setM;
		setM = but2press;
		return setM;
	}
}

int ReadBut(DigitalIoPin *button, int but123press, int min, int max){
	bool but123value;
	but123value = button->read();
	if(but123value == true){
		while(but123value){
			but123value = button->read();
		} //but1value : false
		but123press = but123press + 1;
		if(but123press > max){but123press = min;}
	}
	return but123press;
}

int main(void) {
	uint32_t sysTickRate;

	#if defined (__USE_LPCOPEN)
	#if !defined(NO_BOARD_LIB)
		Board_Init();
		Chip_RIT_Init(LPC_RITIMER); // initialize RIT (enable clocking etc.)
		Board_LED_Set(0, true);
	#endif
	#endif
	SystemCoreClockUpdate();
	Chip_Clock_SetSysTickClockDiv(1);
	sysTickRate = Chip_Clock_GetSysTickClockRate();
	SysTick_Config(sysTickRate / TICKRATE_HZ1);

    DigitalIoPin d4 (10, 0, true, true, false);

    DigitalIoPin rs (8, 0, false, true, false);
    DigitalIoPin enable (6, 1, false, true, false);
    DigitalIoPin d0 (8, 1, false, true, false);
    DigitalIoPin d1 (5, 0, false, true, false);
    DigitalIoPin d2 (6, 0, false, true, false);
    DigitalIoPin d3 (7, 0, false, true, false);

    DigitalIoPin button1 (17, 0, true, true, false);
	DigitalIoPin button2 (11, 1, true, true, false);
	DigitalIoPin button3 (9, 1, true, true, false);

    LiquidCrystal lcd(&rs, &enable, &d0, &d1, &d2, &d3);


    int valueS;
    int now;

    int compare;
    int updateTime = 0;
    int test = 0;
    bool ledTest = false;

    int mode;

	int alarmH = 0;
	int alarmM = 0;

	char displayBuffer[2][15] = {{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
	clockHelpText modeText[5] = {
			{ 15, [0,0,0} }
			};

	//lcd.setCursor(2, 1);
	//lcd.print("Time");

	sprintf(displayBuffer[0], "test 1\n");
	sprintf(displayBuffer[1], "hello world\n");

    while(1) {
    	lcd.clear();
    	lcd.setCursor(0, 0);
    	lcd.print(displayBuffer[0]);
    	lcd.setCursor(0, 1);
    	lcd.print(displayBuffer[1]);
    	now = clock->GetTick();
    }
    return 0;
}
